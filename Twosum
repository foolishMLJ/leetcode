/*
*Map（映射表）维护的是键-值的关联，调用Map<String,int>时，输入String类型的“键”，对应就要输出int类型的“值”
*例如Map<String，Pet>可以作为使用一个String描述来查找Pet
*public static PetMap{
* public static void main(String[] args){
*   Map<String,Pet> petMap = new HashMap<String,Pet>();
*   petMap.put("My cat", new Cat("Molly"));
*   petMap.put("My dog", new Dog("Ginger"));
*   print(petMap);//Output:{My Cat=Cat Molly, My Dog=Dog Ginger}
*   Pet dog = petMap.get("My Dog");
*   print(dog);//Output:Dog Ginger
*   print(petMap.containsKey);//Output:true
*   print(petMap.containsValue);//Output:true
* }
*}
*Map表的中键与值的对应关系,再如简单的对应关系：map.put("1","one")，前者标识表中的key，后者表示key对应的value
*System.out.println("map是否包含key 1:" + map.containsKey("1"));
*System.out.println("map是否包含value one:" + map.containsValue("one"));
*/ 
/*******第一次做题，熟悉语法的同时也熟悉了如何在main函数中引用类，一个函数的开始运行一般需要从main函数开始，注意“变量初始化”“输入和输出”*****/
/****************************************************以下用两种算法解决问题***********************************************************/

import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
public class TwoSum {
    public static void main(String[] args){
        int[] nums = {4,2,5,7,4,1,0,13};
        int target = 13;
        solution s = new solution();
        int[] a = s.twoSum(nums,target);
        // int i = a[0];
        // int j = a[1];
        // System.out.println("indice1="+i+"\n"+"indice2="+j);
        System.out.println(Arrays.toString(a));
    }
}
class solution{
    public int[] twoSum(int[] numbers, int target){
        int[] result = new int[2];
        for (int i = 0;i<numbers.length-1;i++){
            for (int j = i+1; j<numbers.length;j++){
                int tar = numbers[i]+numbers[j];
                if (tar == target){
                    result[0] = i;
                    result[1] = j;
                    return result;
                }else System.out.println("Nextline!");
            }
        }
        return result;
    }
}

/*class solution {
    public int[] twoSum(int[] numbers, int target) {
        int[] result = new int[2];
        Map<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (int i = 0; i < numbers.length; i++) {
            if (map.containsKey(target - numbers[i])) {
                result[1] = i;
                result[0] = map.get(target - numbers[i]);
                return result;
            }
            map.put(numbers[i], i);
        }
        return result;
    }
}*/
